from collections import List, Set, Dict
from testing import assert_true, assert_equal, assert_not_equal

struct FreeCellBoard:
    var card_positions: SIMD[DType.uint8, 64]   # 52-length array storing card positions but simd has to be power of 2 i.e. 64, Main representation used as dict keys
    var top_cards: SIMD[DType.uint8,8]        # Top cards in each column
    var bottom_cards: SIMD[DType.uint8,8]    # Bottom cards in each column
    var free_cells: SIMD[DType.uint8,4]       # Free cells (63 means empty)
    var next_home_cards: SIMD[DType.uint8,4] # Next desired card for each home cell
    var next_home_cards_solved: SIMD[DType.uint8,4] 
    var full_board: SIMD[DType.uint8,256] # dual representation, board representation is bigger but easier to find the new top card etc.
    var current_permutation: SIMD[DType.uint8,8]
    var inverse_permutation: SIMD[DType.uint8,8]
    
    var current_free_cell_permutation: SIMD[DType.uint8, 4]
    var inverse_free_cell_permutation: SIMD[DType.uint8, 4]
    var move_list_origin: List[UInt8]
    var move_list_target: List[UInt8]
    # Fixed-size legal move lookup table
    var column_move_lookup_1: SIMD[DType.uint8,64]
    var column_move_lookup_2: SIMD[DType.uint8,64]

    var legal_moves_origin: SIMD[DType.uint8,64]
    var legal_moves_target: SIMD[DType.uint8,64]
    var num_legal_moves: Int
    var num_cells_occupied: Int
    var solved: Bool

    fn __init__(inout self)raises:
        var range_2: UInt8 = 7
        # Initialize tensors with appropriate sizes
        self.card_positions = SIMD[DType.uint8, 64]() #Tensor[DType.uint8](TensorShape(52))  # 52 cards
        self.top_cards = SIMD[DType.uint8, 8]()       # 8 columns
        self.bottom_cards = SIMD[DType.uint8, 8]()       # 8 columns
        self.free_cells = SIMD[DType.uint8, 4]()      # 4 free cells
        self.next_home_cards = SIMD[DType.uint8, 4]()  # Next expected home cards
        self.next_home_cards_solved = SIMD[DType.uint8,4](52,53,54,55)
        self.full_board = SIMD[DType.uint8, 256]()  # Move lookup table for each card
        self.current_permutation = SIMD[DType.uint8, 8]()
        self.inverse_permutation = SIMD[DType.uint8, 8]()

        self.current_free_cell_permutation = SIMD[DType.uint8, 4]()
        self.inverse_free_cell_permutation = SIMD[DType.uint8, 4]()

        self.move_list_origin=List[UInt8]()
        self.move_list_target=List[UInt8]()

        self.column_move_lookup_1 = SIMD[DType.uint8, 64]()  # Move lookup table for each card
        self.column_move_lookup_2 = SIMD[DType.uint8, 64]()  # Move lookup table for each card
        self.legal_moves_origin = SIMD[DType.uint8, 64]()  # legal move cards
        self.legal_moves_target = SIMD[DType.uint8, 64]()  # legal move target positions
        self.num_legal_moves = 0
        self.num_cells_occupied = 0
        self.solved = False

        # Initialize values (defining 63 as "empty")
        #var i: UInt8
        self.free_cells=63
        for i in range(4):
            self.next_home_cards[i]=i # last two digits are the suit since ace has value 0 the aces are  "0 00000 00" "0 00000 01" "0 00000 10" "0 00000 11" i.E. range(4)
            self.current_free_cell_permutation[i]=i
            self.inverse_free_cell_permutation[i]=i
        var k: Int =0
        self.full_board=63

        for i in range(8):
            self.current_permutation[i]=i
            self.inverse_permutation[i]=i
            if i==4:
                range_2=6
            for j in range(range_2):
                
                self.card_positions[k]= i*32+j
                
                self.full_board[i*32+j]=k
                if j==0:
                    self.bottom_cards[i]=k
                if j==range_2.__int__()-1:
                    self.top_cards[i]=k
                k+=1
            

        # Generate the lookup table
        self.generate_column_move_lookup()
        self.canonicalize_position()
        self.generate_all_legal_moves()

    fn __init__(inout self, card_input: String)raises:
        """Overloaded initializer with card input."""
        self.__init__()  # Start with default init
        self.parse_input(card_input)
        self.canonicalize_position()
        self.generate_all_legal_moves()

    fn __copyinit__(inout self, existing: Self):
        self.card_positions = existing.card_positions  # 52-length array storing card positions but simd has to be power of 2 i.e. 64, Main representation used as dict keys
        self.top_cards = existing.top_cards       # Top cards in each column
        self.bottom_cards= existing. bottom_cards   # Bottom cards in each column
        self.free_cells= existing.free_cells       # Free cells (63 means empty)
        self.next_home_cards= existing.next_home_cards # Next desired card for each home cell
        self.next_home_cards_solved= existing.next_home_cards_solved
        self.full_board= existing.full_board # dual representation, board representation is bigger but easier to find the new top card etc.
        self.current_permutation= existing.current_permutation
        self.inverse_permutation= existing.inverse_permutation
        
        self.current_free_cell_permutation= existing.current_free_cell_permutation
        self.inverse_free_cell_permutation= existing.inverse_free_cell_permutation
        self.move_list_origin= existing.move_list_origin
        self.move_list_target= existing.move_list_target
        # Fixed-size legal move lookup table
        self.column_move_lookup_1= existing.column_move_lookup_1
        self.column_move_lookup_2= existing.column_move_lookup_2

        self.legal_moves_origin= existing.legal_moves_origin
        self.legal_moves_target= existing.legal_moves_target
        self.num_legal_moves= existing.num_legal_moves
        self.num_cells_occupied= existing.num_cells_occupied
        self.solved= existing.solved

    fn __moveinit__(inout self, owned existing: Self):
        self.card_positions = existing.card_positions  # 52-length array storing card positions but simd has to be power of 2 i.e. 64, Main representation used as dict keys
        self.top_cards = existing.top_cards       # Top cards in each column
        self.bottom_cards= existing. bottom_cards   # Bottom cards in each column
        self.free_cells= existing.free_cells       # Free cells (63 means empty)
        self.next_home_cards= existing.next_home_cards # Next desired card for each home cell
        self.next_home_cards_solved= existing.next_home_cards_solved
        self.full_board= existing.full_board # dual representation, board representation is bigger but easier to find the new top card etc.
        self.current_permutation= existing.current_permutation
        self.inverse_permutation= existing.inverse_permutation
        
        self.current_free_cell_permutation= existing.current_free_cell_permutation
        self.inverse_free_cell_permutation= existing.inverse_free_cell_permutation
        self.move_list_origin= existing.move_list_origin^ 
        self.move_list_target= existing.move_list_target^ 
        # Fixed-size legal move lookup table
        self.column_move_lookup_1= existing.column_move_lookup_1
        self.column_move_lookup_2= existing.column_move_lookup_2

        self.legal_moves_origin= existing.legal_moves_origin
        self.legal_moves_target= existing.legal_moves_target
        self.num_legal_moves= existing.num_legal_moves
        self.num_cells_occupied= existing.num_cells_occupied
        self.solved= existing.solved


    fn parse_input(inout self, card_input: String):
        """Parse input string of cards and initialize board."""
        var card_strings: List[String]
        try:
            card_strings = card_input.split(" ")
        except:
            print("unable to parse input")
            return
        for i in range(len(card_strings)):
            var card_pos : UInt8 = (i%8*32)+i//8  #i%8 is the collumn i//8 is the position
            var card_index : Int = self.get_card_index(card_strings[i]).__int__()
            #print(i,i%8,i//8,card_index)
            if i<8:
                self.bottom_cards[i]= card_index
            elif i >= 52:
                break
            elif i >= 52-4:
                self.top_cards[i-52+4] = card_index
            elif i >= 52-8:
                self.top_cards[i-52+12] = card_index
            self.card_positions[card_index] = card_pos
            self.full_board[card_pos.__int__()]=card_index




    fn generate_column_move_lookup(inout self):
        """Pregenerate legal column moves for each card."""
        var value: UInt8
        var suit: UInt8
        var color: UInt8
        var other_value: UInt8
        var other_suit: UInt8
        var other_color: UInt8
        var legal_moves: UInt8
        #@parameter
        for card_index in range(52):
            value, suit, color = self.get_card_value(card_index)
            if value==12: #king
                self.column_move_lookup_1[card_index]=self.get_card_index(13,0,0) #value 13 does not exist, king has no legal collumn move
                self.column_move_lookup_1[card_index]=self.get_card_index(13,0,0) #value 13 does not exist, king has no legal collumn move
                continue
            # Every card has two legal move options (opposite color, one rank higher)
            legal_moves = 0
            #@parameter
            for other_card_index in range(52):
                other_value, other_suit, other_color = self.get_card_value(other_card_index)
                if other_value == value + 1 and other_color != color:
                    if legal_moves == 0:
                        self.column_move_lookup_1[card_index] = other_card_index
                        legal_moves += 1
                    elif legal_moves == 1:
                        self.column_move_lookup_2[card_index] = other_card_index
                        break
                        

    fn generate_all_legal_moves(inout self) raises:
        """Generate all legal moves based on current board state."""
        #print(self.card_positions)
        var move_count: Int=0
        self.legal_moves_origin=29 # placeholderposition only first movecount moves will be legal movesall other are 29
        self.legal_moves_target=29
        
        # Free Cell Moves: If there is an empty free cell, move all top cards and free cell cards
        self.num_cells_occupied=4
        #@parameter
        for i in range(4):
            if self.free_cells[i] == 63:
                self.num_cells_occupied = i
                break
        if self.num_cells_occupied != 4:
            # Move all top cards from columns to the free cell
            #@parameter
            for top_card_i in range(8):
                if self.top_cards[top_card_i] != 63:
                    self.legal_moves_origin[move_count] = self.card_positions[self.top_cards[top_card_i].__int__()]
                    #print("card",self.top_cards[top_card_i])
                    #print("origin",self.legal_moves_origin[move_count])
                    #col2,val2=self.get_collumn_position(self.legal_moves_origin[move_count])
                    #print(self.top_cards[top_card_i].__int__(),self.card_positions[self.top_cards[top_card_i].__int__()])
                    self.legal_moves_target[move_count]= 30+(self.num_cells_occupied*32)  # Move to free cell (index 30) and collumn 0-3 representing each cell
                    #print("origin Free-Cell", self.legal_moves_origin[move_count])
                    move_count += 1

        # Home Cell Moves
        var movable_cards= SIMD[DType.uint8, 16]()
        #@parameter
        for i in range(8):
            movable_cards[i]=self.top_cards[i]
        #@parameter
        for i in range(4):
            movable_cards[i+8]=self.free_cells[i]
        var card: UInt8
        var value:UInt8
        var suit: UInt8
        var color: UInt8
        #@parameter
        for card_i in range(12):
            card=movable_cards[card_i]
            if card != 63:
                value, suit, color = self.get_card_value(card)
                if card == self.next_home_cards[(2*suit+color).__int__()]:
                    self.legal_moves_origin[move_count] = self.card_positions[card.__int__()]
                    self.legal_moves_target[move_count] = 31+color*32+suit*64# Move to home cell (index 31) and collumn 0-3 representing color
                    #print("origin Home", self.legal_moves_origin[move_count])
                    move_count += 1

        # Column Moves
        #@parameter
        #print(self.top_cards)
        for col_idx in range(8):
            var top_card = self.top_cards[col_idx]
            

            # If the column is empty, move any card to this empty column
            if top_card == 63:  
                #@parameter
                for card_i in range(12):
                    card=movable_cards[card_i]
                    if card != 63:
                        self.legal_moves_origin[move_count] = self.card_positions[card.__int__()]
                        self.legal_moves_target[move_count] = col_idx << 5
                        #print("origin collumn empty", self.legal_moves_origin[move_count])
                        move_count += 1
                break  # Stop the loop, since all following columns will also be empty

            # Otherwise, check if any other card can be moved onto this top card
            else:
                #@parameter
                for card_i in range(12):
                    card=movable_cards[card_i]
                    if card != 63:
                        # Check if the top card is a legal move option for the current card
                        var move_option_1 = self.column_move_lookup_1[card.__int__()]
                        var move_option_2 = self.column_move_lookup_2[card.__int__()]
                        
                        if move_option_1 == top_card or move_option_2 == top_card:  # Valid move to this column
                            self.legal_moves_origin[move_count] = self.card_positions[card.__int__()]
                            self.legal_moves_target[move_count] = self.card_positions[top_card.__int__()] + 1
                            #print("origin collumn", self.legal_moves_origin[move_count])
                            move_count += 1
        #print(move_count, self.legal_moves_origin)
        for i in range(move_count):
            assert_not_equal(self.legal_moves_origin[i],self.legal_moves_target[i],msg="ERROR_ILLEGAL_MOVE")
            #if self.legal_moves_origin[i]==self.legal_moves_target[i]:
             #   print("ERROR_ILLEGAL_MOVE")
              #  print("ERROR_ILLEGAL_MOVE")
        self.num_legal_moves=move_count
        #print(self.card_positions)
    fn canonicalize_position(inout self) raises:
        #print(self.top_cards)
        #print(self.bottom_cards)
        #print(self.full_board[self.top_cards[0].__int__()])
        """Canonicalize the position by sorting columns and free cells."""
        # Step 1: Sort Columns based on the index of the bottom card
        var sorted = False
        var temp_uint:UInt8

        # Create a mapping from old to new column indices
        var col_mapping: SIMD[DType.uint8,8]  = SIMD[DType.uint8,8](0,1,2,3,4,5,6,7)
        
        while not sorted:
            sorted=True
            #@parameter
            for i in range(7):
                if self.bottom_cards[i]>self.bottom_cards[i+1]:
                    temp_uint=self.bottom_cards[i]
                    self.bottom_cards[i]=self.bottom_cards[i+1]
                    self.bottom_cards[i+1]=temp_uint

                    temp_uint=col_mapping[i]
                    col_mapping[i]=col_mapping[i+1]
                    col_mapping[i+1]=temp_uint

                    temp_uint=self.current_permutation[i]
                    self.current_permutation[i]=self.current_permutation[i+1]
                    self.current_permutation[i+1]=temp_uint
                    sorted =False

        var old_top_cards = self.top_cards
        var old_full_board = self.full_board
        var card1:Int #UInt8#
        var card2:Int
        var pos1:Int
        var pos2:Int
        #@parameter
        for i in range(8):
            self.inverse_permutation[self.current_permutation[i].__int__()]=i
            if not (col_mapping[i]==i):
                self.top_cards[i] = old_top_cards[col_mapping[i].__int__()]
                #@parameter
                for j in range(19): #7 original cards imagine king is top card initialy then max 12 other cards can be added A-Q
                    card1=old_full_board[col_mapping[i].__int__()*32+j].__int__()
                    self.full_board[i*32+j]=card1
                    self.card_positions[card1]=i*32+j
                """if not (col_mapping[i]<i): #avoid double swap
                    for j in range(32):
                        pos1=i*32+j
                        pos2=col_mapping[i].__int__()*32+j
                        card1=self.full_board[i*32+j].__int__()
                        card2=self.full_board[pos2].__int__()
                        if card1==card2: #only possible if both are empty (63), we prevent reaching the free cells and home cells
                            break
                        else:
                            self.full_board[pos1]=card2
                            self.full_board[pos2]=card1
                            self.card_positions[card2]=pos1
                            self.card_positions[card1]=pos2"""

            
            
        
        # Step 2: Sort Free Cells based on card indices
        sorted=False
        while not sorted:
            sorted=True
            ##@parameter
            for i in range(3):
                if self.free_cells[i]>self.free_cells[i+1]:
                    temp_uint=self.current_free_cell_permutation[i]
                    self.current_free_cell_permutation[i]=self.current_free_cell_permutation[i+1]
                    self.current_free_cell_permutation[i+1]=temp_uint
                    sorted =False

                    pos1=30+(i*32)
                    pos2=30+((i+1)*32)
                    card1=self.free_cells[i].__int__()
                    card2=self.free_cells[i+1].__int__()

                    self.free_cells[i]=card2
                    self.free_cells[i+1]=card1
                    self.full_board[pos1]=card2
                    self.card_positions[card2]=pos1
                    self.full_board[pos2]=card1
                    self.card_positions[card1]=pos2

                    sorted =False
        #@parameter
        for i in range(4):
            self.inverse_free_cell_permutation[self.current_free_cell_permutation[i].__int__()]=i
        self.card_positions[63]=0

        #sanity checks
        @parameter
        if True:
            for i in range(8):
                #print(i,self.full_board[i*32],self.bottom_cards[i])
                assert_equal(self.full_board[i*32],self.bottom_cards[i],msg="SANITY CHECK FAILED")               
                assert_equal(self.card_positions[self.bottom_cards[i].__int__()], i*32,msg="SANITY CHECK FAILED")

        #print(self.top_cards)
        #print(self.bottom_cards)
        ##print(self.full_board[self.top_cards[0].__int__()])
    
    fn make_move(inout self,origin: UInt8, target:UInt8)raises -> Bool:
        origin_collumn,origin_position=self.get_collumn_position(origin)
        target_collumn,target_position=self.get_collumn_position(target)
        card = self.full_board[origin.__int__()]
        self.card_positions[card.__int__()]=target
        self.full_board[origin.__int__()]=63
        self.full_board[target.__int__()]=card
        if target_position!= 31 and target_position!=30:
            self.top_cards[target_collumn.__int__()]=card
        elif target_position==30:
            self.free_cells[target_collumn.__int__()]=card
            self.num_cells_occupied+=1
        else:
            self.next_home_cards[target_collumn.__int__()]=card+4 #this is card with same suit but +1 value
            self.solved = all(self.next_home_cards==self.next_home_cards_solved)
        if target_position==0:
            self.bottom_cards[target_collumn.__int__()]=card
            self.top_cards[target_collumn.__int__()]=card
        if origin_position==0:
            self.bottom_cards[origin_collumn.__int__()]=63    
            self.top_cards[origin_collumn.__int__()]=63  
        elif origin_position !=30:
            self.top_cards[origin_collumn.__int__()]=self.full_board[(origin_collumn*32+origin_position-1).__int__()]
        else:
            self.free_cells[origin_collumn.__int__()]=63
            self.num_cells_occupied-=1
        if origin_position !=30:
            origin_collumn=self.current_permutation[origin_collumn.__int__()]
        else:
            origin_collumn=self.current_free_cell_permutation[origin_collumn.__int__()]
        if target_position!= 31 and target_position!=30:
            target_collumn=self.current_permutation[target_collumn.__int__()]
        elif target_position ==30:
            #print(target_collumn)
            target_collumn=self.current_free_cell_permutation[target_collumn.__int__()]
            #print(target_collumn)
        self.move_list_origin.append(origin_collumn*32+origin_position)
        self.move_list_target.append(target_collumn*32+target_position)
        for i in range(52):
            if not i == self.full_board[self.card_positions[i].__int__()].__int__() and not ((self.card_positions[i]&31)==31):
                print(i)
                print(self.card_positions[i])
                print(self.full_board[self.card_positions[i].__int__()])
                return False
        self.canonicalize_position()
        for i in range(52):
            if not i == self.full_board[self.card_positions[i].__int__()].__int__() and not ((self.card_positions[i]&31)==31):
                print(i)
                print(self.card_positions[i])
                print(self.full_board[self.card_positions[i].__int__()])
                return False
        self.generate_all_legal_moves()
        for i in range(52):
            if not i == self.full_board[self.card_positions[i].__int__()].__int__() and not ((self.card_positions[i]&31)==31):
                print(i)
                print(self.card_positions[i])
                print(self.full_board[self.card_positions[i].__int__()])
                return False
        return True

    fn unmake_last_move(inout self)raises -> Bool:
        target = self.move_list_origin.pop()
        origin = self.move_list_target.pop()  #since we undo origin becomes target of the undo

        origin_collumn,origin_position=self.get_collumn_position(origin)
        target_collumn,target_position=self.get_collumn_position(target)
        #print(self.current_permutation)
        if target_position!=30:
            target_collumn=self.inverse_permutation[target_collumn.__int__()]
        else:
            target_collumn= self.inverse_free_cell_permutation[target_collumn.__int__()]
        if origin_position!= 30 and origin_position !=31:
            
            origin_collumn=self.inverse_permutation[origin_collumn.__int__()]
            
        elif origin_position==30:
            #print(origin_collumn)
            origin_collumn=self.inverse_free_cell_permutation[origin_collumn.__int__()]
            #print(origin_collumn)
        else:
            print(origin,target,origin_position,target_position,origin_collumn,target_collumn)
            self.solved=False
            
        
        origin = origin_collumn*32+origin_position
        target = target_collumn*32+target_position
        origin_collumn,origin_position=self.get_collumn_position(origin)
        target_collumn,target_position=self.get_collumn_position(target)

        var card: UInt8 = self.full_board[origin.__int__()]
        if origin_position==31:
            print(target)
            print(card)
        self.card_positions[card.__int__()]=target
        self.full_board[target.__int__()]=card
        self.full_board[origin.__int__()]=63

        if target_position!=30:
            self.top_cards[target_collumn.__int__()]=card
        else:
            self.free_cells[target_collumn.__int__()]=card
            self.num_cells_occupied+=1

        if target_position==0:
            self.bottom_cards[target_collumn.__int__()]=card
        if origin_position==0:
            self.bottom_cards[origin_collumn.__int__()]=63    
            self.top_cards[origin_collumn.__int__()]=63  
        elif origin_position !=30 and origin_position!=31:
            self.top_cards[origin_collumn.__int__()]=self.full_board[(origin_collumn*32+origin_position-1).__int__()]
        elif origin_position == 30:
            self.free_cells[origin_collumn.__int__()]=63
            self.num_cells_occupied-=1
        else:
            print(origin)
            self.full_board[origin.__int__()]=card-4
            self.next_home_cards[origin_collumn.__int__()]=card #this is card with same suit but +1 value
        for i in range(52):
            if (not i == self.full_board[self.card_positions[i].__int__()].__int__()) and not ((self.card_positions[i]&31)==31):
                print(i)
                print(self.card_positions[i])
                print(self.full_board[self.card_positions[i].__int__()])
                return False
        self.canonicalize_position()
        for i in range(52):
            if not i == self.full_board[self.card_positions[i].__int__()].__int__() and not ((self.card_positions[i]&31)==31):
                print(i)
                print(self.card_positions[i])
                print(self.full_board[self.card_positions[i].__int__()])
                return False
        self.generate_all_legal_moves()
        for i in range(52):
            if not i == self.full_board[self.card_positions[i].__int__()].__int__() and not ((self.card_positions[i]&31)==31):
                print(i)
                print(self.card_positions[i])
                print(self.full_board[self.card_positions[i].__int__()])
                return False
        return True

    fn get_collumn_position(inout self,full_position:UInt8) -> (UInt8, UInt8):
        return(full_position//32,full_position&31) #collumn position in collumn


    fn get_card_value(inout self,card_index: UInt8) -> (UInt8, UInt8, UInt8):
        """Extract the value, suit, and color from the card index."""
        var value: UInt8 = (card_index >> 2) & 2**4-1   # Extract 4 bits for value
        var suit: UInt8 = (card_index >> 1) & 2**1-1  # Extract 1 bit for suit
        var color: UInt8 = (card_index) & 2**1-1  # Extract 1 bit for color
        return (value, suit, color)
    fn get_card_index(inout self, value:UInt8, suit:UInt8,color:UInt8) -> UInt8:
        var card_index: UInt8 = value*4 +suit*2+color
        #var value_t: UInt8 = (card_index >> 2) & 2**4-1   # Extract 4 bits for value
        #var suit_t: UInt8 = (card_index >> 1) & 2**1-1    # Extract 1 bit for suit
        #var color_t: UInt8 = (card_index) & 2**1-1  # Extract 1 bit for color
        #print(card_index,value_t,suit_t,color_t)
        return card_index


    fn get_card_index(inout self, card_string:String) -> UInt8:
        var value: UInt8
        var suit: UInt8
        var color: UInt8
        var value_letter: String = card_string[0]
        var suit_letter: String = card_string[1]
        print(card_string)
        if value_letter=="A":
            value=0
        elif value_letter=="T":
            value=9
        elif value_letter=="J":
            value=10
        elif value_letter=="Q":
            value=11
        elif value_letter=="K":
            value=12
        else:
            try:
                value=int(value_letter)-1
            except:
                value=0
                print("Warning could not read card value")
        if suit_letter=="S":
            suit=0
            color=0
        elif suit_letter=="H":
            suit=0
            color=1
        elif suit_letter=="C":
            suit=1
            color=0
        elif suit_letter=="D":
            suit=1
            color=1
        else:
            suit=0
            color=0
            print("Warning could not read suit value")
        return self.get_card_index(value,suit,color)

@value
struct SIMDKey[T: DType, N: Int](KeyElement):
    var value: SIMD[T, N]

    fn __init__(inout self, value: SIMD[T, N]):
        self.value = value

    fn __hash__(self) -> UInt:
        return self.value.__hash__()

    fn __eq__(self, other: SIMDKey[T, N]) -> Bool:
        # Perform element-wise comparison and then check if all elements are equal
        return all(self.value == other.value)
    fn __ne__(self, other: SIMDKey[T, N]) -> Bool:
        # Perform element-wise comparison and then check if all elements are equal
        return not all(self.value == other.value)

def solve(inout position: FreeCellBoard, inout visited: Dict[String,Bool], depth=0) -> Bool:
    # Convert card_positions to a tuple for hashing
    
    #print(position.card_positions)
    if position.card_positions.__str__() in visited:
        return False
    else:   
        print(len(visited),depth,flush=True)
        visited[position.card_positions.__str__()]=True

    #print("hi4",flush=True)

    if position.solved:
        print("Solution found!")
        for i in range(len(position.move_list_origin)):
            print("Move origins:", position.move_list_origin[i])
            print("Move targets:", position.move_list_target[i])
        return True

    for i in range(position.num_legal_moves):
        # Make the move
        #col,val=position.get_collumn_position(position.legal_moves_origin[i])
        #col2,val2=position.get_collumn_position(position.legal_moves_target[i])
        #print(position.top_cards)
        #print(position.legal_moves_origin[i],position.legal_moves_target[i])
        var test = position.card_positions.__str__()
        var move = position.legal_moves_origin[i].__str__()+"to"+position.legal_moves_target[i].__str__()
        #print(move)
        if position.legal_moves_origin[i] ==29:
            continue
        if position.full_board[position.legal_moves_origin[i].__int__()]==63:
            print("!!!!!ERRORR63!!!!!")
            print(position.card_positions[63])
            print(position.full_board[3])
            print(move)
            print(test)
            print(position.card_positions.__str__())
            return True
        var sucess= position.make_move(position.legal_moves_origin[i], position.legal_moves_target[i])
        #print("SUCESS",sucess)
        if not sucess:
            print("!!!!!ERRORRMOVE!!!!!")
            print(move)
            print(test)
            print(position.card_positions.__str__())
            return True
        #print(position.bottom_cards)
        var test2 = position.card_positions.__str__()
        #print(position.top_cards)
        #print("hi5")
        # Recursive call
        
        if solve(position, visited,depth=depth+1):
            return True
        #print("hi6")
        # Unmake the move
        
        sucess= position.unmake_last_move()
        #print("SUCESS",sucess)
        if not sucess:
            print("!!!!!ERRORRMOVEUNMAKE!!!!!")
            print(move)
            print(test)
            print(position.card_positions.__str__())
            return True
        #print(position.bottom_cards)
        if test != position.card_positions.__str__():
            print("!!!!!ERRORR Unmove Position Different!!!!!")
            print(move)
            print(test)
            print(test2)           
            print(position.card_positions.__str__())
            return True
    #print("position cannot be solved")
    
    return False

def main():
    print("hi1",flush=True)
    var board = FreeCellBoard("7D AH AS TD 6C TC JH AC 2S 4H 2C 3C TH 5H 9C 7H 9H KH 3H AD 9D 8S JD 7C 5C 4D 8C 6D QS 5D KS 7S 9S 8D JC 6H 4S 3S QH 2D TS QD 8H QC 2H 6S JS KC 3D KD 4C 5S")
    print("hi2",flush=True)
    var hashtable = Dict[String,Bool]()
    print("hi3")
    solved= solve(board,hashtable)

    print(solved)

    
    

